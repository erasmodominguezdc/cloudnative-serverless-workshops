kind: ConfigMap
apiVersion: v1
metadata:
  name: config-observability
  namespace: knative-serving
  selfLink: /api/v1/namespaces/knative-serving/configmaps/config-observability
  uid: 4457bb00-d140-4e0f-bc91-f8e4fd4a41da
  resourceVersion: '1919289'
  creationTimestamp: '2021-07-04T16:04:10Z'
  labels:
    serving.knative.dev/release: v0.23.1
  annotations:
    knative.dev/example-checksum: 97c1d10b
    kubectl.kubernetes.io/last-applied-configuration: >
      {"apiVersion":"v1","data":{"_example":"################################\n#
      #\n#    EXAMPLE CONFIGURATION     #\n#
      #\n################################\n\n# This block is not actually
      functional configuration,\n# but serves to illustrate the available
      configuration\n# options and document them in a way that is accessible\n#
      to users that `kubectl edit` this config map.\n#\n# These sample
      configuration options may be copied out of\n# this example block and
      unindented to be in the data block\n# to actually change the
      configuration.\n\n# logging.enable-var-log-collection defaults to
      false.\n# The fluentd daemon set will be set up to collect /var/log if\n#
      this flag is true.\nlogging.enable-var-log-collection: \"false\"\n\n#
      logging.revision-url-template provides a template to use for producing
      the\n# logging URL that is injected into the status of each
      Revision.\nlogging.revision-url-template:
      \"http://logging.example.com/?revisionUID=${REVISION_UID}\"\n\n# If
      non-empty, this enables queue proxy writing user request logs to stdout,
      excluding probe\n# requests.\n# NB: after 0.18 release
      logging.enable-request-log must be explicitly set to true\n# in order for
      request logging to be enabled.\n#\n# The value determines the shape of the
      request logs and it must be a valid go text/template.\n# It is important
      to keep this as a single line. Multiple lines are parsed as separate
      entities\n# by most collection agents and will split the request logs into
      multiple records.\n#\n# The following fields and functions are available
      to the template:\n#\n# Request: An http.Request (see
      https://golang.org/pkg/net/http/#Request)\n# representing an HTTP request
      received by the server.\n#\n# Response:\n# struct {\n#   Code    int
      // HTTP status code (see
      https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml)\n#
      Size    int       // An int representing the size of the response.\n#
      Latency float64   // A float64 representing the latency of the response in
      seconds.\n# }\n#\n# Revision:\n# struct {\n#   Name          string  //
      Knative revision name\n#   Namespace     string  // Knative revision
      namespace\n#   Service       string  // Knative service name\n#
      Configuration string  // Knative configuration name\n#   PodName
      string  // Name of the pod hosting the revision\n#   PodIP         string
      // IP of the pod hosting the revision\n#
      }\n#\nlogging.request-log-template: '{\"httpRequest\": {\"requestMethod\":
      \"{{.Request.Method}}\", \"requestUrl\": \"{{js .Request.RequestURI}}\",
      \"requestSize\": \"{{.Request.ContentLength}}\", \"status\":
      {{.Response.Code}}, \"responseSize\": \"{{.Response.Size}}\",
      \"userAgent\": \"{{js .Request.UserAgent}}\", \"remoteIp\": \"{{js
      .Request.RemoteAddr}}\", \"serverIp\": \"{{.Revision.PodIP}}\",
      \"referer\": \"{{js .Request.Referer}}\", \"latency\":
      \"{{.Response.Latency}}s\", \"protocol\": \"{{.Request.Proto}}\"},
      \"traceId\": \"{{index .Request.Header \"X-B3-Traceid\"}}\"}'\n\n# If
      true, the request logging will be enabled.\n# NB: up to and including
      Knative version 0.18 if logging.request-log-template is non-empty, this
      value\n# will be ignored.\nlogging.enable-request-log: \"false\"\n\n# If
      true, this enables queue proxy writing request logs for probe requests to
      stdout.\n# It uses the same template for user requests, i.e.
      logging.request-log-template.\nlogging.enable-probe-request-log:
      \"false\"\n\n# metrics.backend-destination field specifies the system
      metrics destination.\n# It supports either prometheus (the default) or
      stackdriver.\n# Note: Using stackdriver will incur additional
      charges\nmetrics.backend-destination: prometheus\n\n#
      metrics.request-metrics-backend-destination specifies the request
      metrics\n# destination. It enables queue proxy to send request metrics.\n#
      Currently supported values: prometheus (the default),
      stackdriver.\nmetrics.request-metrics-backend-destination: prometheus\n\n#
      metrics.stackdriver-project-id field specifies the stackdriver project ID.
      This\n# field is optional. When running on GCE, application default
      credentials will be\n# used if this field is not
      provided.\nmetrics.stackdriver-project-id: \"\u003cyour stackdriver
      project id\u003e\"\n\n# metrics.allow-stackdriver-custom-metrics indicates
      whether it is allowed to send metrics to\n# Stackdriver using \"global\"
      resource type and custom metric type if the\n# metrics are not supported
      by \"knative_revision\" resource type. Setting this\n# flag to \"true\"
      could cause extra Stackdriver charge.\n# If metrics.backend-destination is
      not Stackdriver, this is
      ignored.\nmetrics.allow-stackdriver-custom-metrics: \"false\"\n\n#
      profiling.enable indicates whether it is allowed to retrieve runtime
      profiling data from\n# the pods via an HTTP server in the format expected
      by the pprof visualization tool. When\n# enabled, the Knative Serving pods
      expose the profiling data on an alternate HTTP port 8008.\n# The HTTP
      context root for profiling is then /debug/pprof/.\nprofiling.enable:
      \"false\"\n","metrics.backend-destination":"opencensus","metrics.opencensus-address":"otel-collector.metrics:55678","metrics.request-metrics-backend-destination":"prometheus","request-metrics-backend-destination":"opencensus"},"kind":"ConfigMap","metadata":{"annotations":{"knative.dev/example-checksum":"97c1d10b"},"creationTimestamp":"2021-07-04T16:04:10Z","labels":{"serving.knative.dev/release":"v0.23.1"},"managedFields":[{"apiVersion":"v1","fieldsType":"FieldsV1","fieldsV1":{"f:data":{".":{},"f:_example":{},"f:metrics.request-metrics-backend-destination":{}},"f:metadata":{"f:annotations":{".":{},"f:knative.dev/example-checksum":{},"f:kubectl.kubernetes.io/last-applied-configuration":{}},"f:labels":{".":{},"f:serving.knative.dev/release":{}}}},"manager":"kubectl-client-side-apply","operation":"Update","time":"2021-07-10T16:25:11Z"},{"apiVersion":"v1","fieldsType":"FieldsV1","fieldsV1":{"f:data":{"f:metrics.backend-destination":{},"f:metrics.opencensus-address":{},"f:request-metrics-backend-destination":{}}},"manager":"kubectl-patch","operation":"Update","time":"2021-07-10T17:31:51Z"}],"name":"config-observability","namespace":"knative-serving","selfLink":"/api/v1/namespaces/knative-serving/configmaps/config-observability","uid":"4457bb00-d140-4e0f-bc91-f8e4fd4a41da"}}
  managedFields:
    - manager: kubectl-client-side-apply
      operation: Update
      apiVersion: v1
      time: '2021-07-10T16:25:11Z'
      fieldsType: FieldsV1
      fieldsV1:
        'f:data':
          .: {}
          'f:_example': {}
          'f:metrics.request-metrics-backend-destination': {}
        'f:metadata':
          'f:annotations':
            .: {}
            'f:knative.dev/example-checksum': {}
            'f:kubectl.kubernetes.io/last-applied-configuration': {}
          'f:labels':
            .: {}
            'f:serving.knative.dev/release': {}
    - manager: kubectl-patch
      operation: Update
      apiVersion: v1
      time: '2021-07-10T17:31:51Z'
      fieldsType: FieldsV1
      fieldsV1:
        'f:data':
          'f:metrics.backend-destination': {}
          'f:metrics.opencensus-address': {}
          'f:request-metrics-backend-destination': {}
data:
  metrics.request-metrics-backend-destination: prometheus
  metrics.request-metrics-backend-destination: prometheus
  _example: >
    ################################
    
    #                              #
    
    #    EXAMPLE CONFIGURATION     #
    
    #                              #
    
    ################################
    
    
    # This block is not actually functional configuration,
    
    # but serves to illustrate the available configuration
    
    # options and document them in a way that is accessible
    
    # to users that `kubectl edit` this config map.
    
    #
    
    # These sample configuration options may be copied out of
    
    # this example block and unindented to be in the data block
    
    # to actually change the configuration.
    
    
    # logging.enable-var-log-collection defaults to false.
    
    # The fluentd daemon set will be set up to collect /var/log if
    
    # this flag is true.
    
    logging.enable-var-log-collection: "false"
    
    
    # logging.revision-url-template provides a template to use for producing the
    
    # logging URL that is injected into the status of each Revision.
    
    logging.revision-url-template:
    "http://logging.example.com/?revisionUID=${REVISION_UID}"
    
    
    # If non-empty, this enables queue proxy writing user request logs to
    stdout, excluding probe
    
    # requests.
    
    # NB: after 0.18 release logging.enable-request-log must be explicitly set
    to true
    
    # in order for request logging to be enabled.
    
    #
    
    # The value determines the shape of the request logs and it must be a valid
    go text/template.
    
    # It is important to keep this as a single line. Multiple lines are parsed
    as separate entities
    
    # by most collection agents and will split the request logs into multiple
    records.
    
    #
    
    # The following fields and functions are available to the template:
    
    #
    
    # Request: An http.Request (see https://golang.org/pkg/net/http/#Request)
    
    # representing an HTTP request received by the server.
    
    #
    
    # Response:
    
    # struct {
    
    #   Code    int       // HTTP status code (see
    https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml)
    
    #   Size    int       // An int representing the size of the response.
    
    #   Latency float64   // A float64 representing the latency of the response
    in seconds.
    
    # }
    
    #
    
    # Revision:
    
    # struct {
    
    #   Name          string  // Knative revision name
    
    #   Namespace     string  // Knative revision namespace
    
    #   Service       string  // Knative service name
    
    #   Configuration string  // Knative configuration name
    
    #   PodName       string  // Name of the pod hosting the revision
    
    #   PodIP         string  // IP of the pod hosting the revision
    
    # }
    
    #
    
    logging.request-log-template: '{"httpRequest": {"requestMethod":
    "{{.Request.Method}}", "requestUrl": "{{js .Request.RequestURI}}",
    "requestSize": "{{.Request.ContentLength}}", "status": {{.Response.Code}},
    "responseSize": "{{.Response.Size}}", "userAgent": "{{js
    .Request.UserAgent}}", "remoteIp": "{{js .Request.RemoteAddr}}", "serverIp":
    "{{.Revision.PodIP}}", "referer": "{{js .Request.Referer}}", "latency":
    "{{.Response.Latency}}s", "protocol": "{{.Request.Proto}}"}, "traceId":
    "{{index .Request.Header "X-B3-Traceid"}}"}'
    
    
    # If true, the request logging will be enabled.
    
    # NB: up to and including Knative version 0.18 if
    logging.request-log-template is non-empty, this value
    
    # will be ignored.
    
    logging.enable-request-log: "false"
    
    
    # If true, this enables queue proxy writing request logs for probe requests
    to stdout.
    
    # It uses the same template for user requests, i.e.
    logging.request-log-template.
    
    logging.enable-probe-request-log: "false"
    
    
    # metrics.backend-destination field specifies the system metrics
    destination.
    
    # It supports either prometheus (the default) or stackdriver.
    
    # Note: Using stackdriver will incur additional charges
    
    metrics.backend-destination: prometheus
    
    
    # metrics.request-metrics-backend-destination specifies the request metrics
    
    # destination. It enables queue proxy to send request metrics.
    
    # Currently supported values: prometheus (the default), stackdriver.
    
    metrics.request-metrics-backend-destination: prometheus
    
    
    # metrics.stackdriver-project-id field specifies the stackdriver project ID.
    This
    
    # field is optional. When running on GCE, application default credentials
    will be
    
    # used if this field is not provided.
    
    metrics.stackdriver-project-id: "<your stackdriver project id>"
    
    
    # metrics.allow-stackdriver-custom-metrics indicates whether it is allowed
    to send metrics to
    
    # Stackdriver using "global" resource type and custom metric type if the
    
    # metrics are not supported by "knative_revision" resource type. Setting
    this
    
    # flag to "true" could cause extra Stackdriver charge.
    
    # If metrics.backend-destination is not Stackdriver, this is ignored.
    
    metrics.allow-stackdriver-custom-metrics: "false"
    
    
    # profiling.enable indicates whether it is allowed to retrieve runtime
    profiling data from
    
    # the pods via an HTTP server in the format expected by the pprof
    visualization tool. When
    
    # enabled, the Knative Serving pods expose the profiling data on an
    alternate HTTP port 8008.
    
    # The HTTP context root for profiling is then /debug/pprof/.
    
    profiling.enable: "false"
  metrics.backend-destination: opencensus
  metrics.opencensus-address: 'otel-collector.metrics:55678'
  metrics.request-metrics-backend-destination: prometheus
  request-metrics-backend-destination: opencensus
